'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.view = exports.autocompleteSearch = exports.search = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_PAGE_SIZE = 100;
var ARRAY_PROPERTIES = ['keywords', 'dependencies', 'devDependencies'];
var SEARCH_URL = '//npmsearch.com/query';
var DEFAULT_FIELDS = ['name', 'version', 'description', 'author', 'maintainers', 'homepage', 'repository', 'readme', 'rating', 'created', 'modified', 'dependencies', 'devDependencies', 'scripts', 'keywords'];

//   Currently bugged
//  'times',
function search(query) {
  var from = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
  var size = arguments.length <= 2 || arguments[2] === undefined ? DEFAULT_PAGE_SIZE : arguments[2];
  var fields = arguments.length <= 3 || arguments[3] === undefined ? DEFAULT_FIELDS : arguments[3];

  return fetch(SEARCH_URL + '?q=name:' + query + '&size=' + size + '&from=' + from + '&fields=' + fields.join()).then(function (result) {
    if (!result.ok) {
      throw new Error(result.reason);
    }
    return result.json();
  }).then(function (result) {
    return Object.assign({}, _extends({}, result, {
      results: result.results.map(function (item) {
        return _lodash2.default.mapValues(item, function (prop, key) {
          if (_lodash2.default.includes(ARRAY_PROPERTIES, key)) {
            return prop;
          }
          return prop[0];
        });
      })
    }));
  });
}

var AUTOCOMPLETE_URL = '//ac.cnstrc.com/autocomplete/';
var AUTOCOMPLETE_CALLBACK_NAME = 'searchAutocompleteCallback';
var AUTOCOMPLETE_KEY = 'CD06z4gVeqSXRiDL2ZNK';
var AUTOCOMPLETE_TIMEOUT = 500;

var currentAutocompleteSearch = null;

function cancelAndCleanAutocompleteSearch() {
  if (currentAutocompleteSearch !== null) {
    clearTimeout(currentAutocompleteSearch.timeout);
    document.body.removeChild(currentAutocompleteSearch.script);
    currentAutocompleteSearch = null;
  }
}

function reformatResult(result) {
  return {
    autocomplete: true,
    results: result.sections.packages.map(function (item) {
      return {
        name: item.value,
        description: item.data.description
      };
    }),
    total: result.sections.packages.length
  };
}

function autocompleteSearch(query) {
  cancelAndCleanAutocompleteSearch();
  if (!query) {
    return _bluebird2.default.resolve({
      autocomplete: true,
      results: [],
      total: 0
    });
  }
  return new _bluebird2.default(function (resolve, reject) {
    var timeout = setTimeout(function () {
      return reject(new Error('Autocomplete search timed out !'));
    }, AUTOCOMPLETE_TIMEOUT);
    window[AUTOCOMPLETE_CALLBACK_NAME] = function (result) {
      clearTimeout(timeout);
      return resolve(reformatResult(result));
    };
    var script = document.createElement('SCRIPT');
    var parameters = {
      callback: AUTOCOMPLETE_CALLBACK_NAME,
      'autocomplete_key': AUTOCOMPLETE_KEY
    };
    script.src = '' + AUTOCOMPLETE_URL + query + '?' + _lodash2.default.map(parameters, function (value, key) {
      return key + '=' + value;
    }).join('&');
    document.body.appendChild(script);
    currentAutocompleteSearch = {
      timeout: timeout,
      script: script
    };
  }).finally(cancelAndCleanAutocompleteSearch);
}

var NPM_REGISTERY_URL = '//registry.npmjs.org/';
var CORS_PROXY = '//cors.maxogden.com/';

function view(packageName) {
  return fetch('' + CORS_PROXY + NPM_REGISTERY_URL + packageName).then(function (result) {
    if (!result.ok) {
      throw new Error(result.reason);
    }
    return result.json();
  });
}

exports.search = search;
exports.autocompleteSearch = autocompleteSearch;
exports.view = view;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL25wbS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7QUFDOUIsSUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUN6RSxJQUFNLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQztBQUMzQyxJQUFNLGNBQWMsR0FBRyxDQUNyQixNQUFNLEVBQ04sU0FBUyxFQUNULGFBQWEsRUFDYixRQUFRLEVBQ1IsYUFBYSxFQUNiLFVBQVUsRUFDVixZQUFZLEVBQ1osUUFBUSxFQUNSLFFBQVEsRUFDUixTQUFTLEVBQ1QsVUFBVSxFQUNWLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsQ0FJWCxDQUFDOzs7O0FBRUYsU0FBUyxNQUFNLENBQUMsS0FBSyxFQUErRDtNQUE3RCxJQUFJLHlEQUFHLENBQUM7TUFBRSxJQUFJLHlEQUFHLGlCQUFpQjtNQUFFLE1BQU0seURBQUcsY0FBYzs7QUFDaEYsU0FBTyxLQUFLLENBQUksVUFBVSxnQkFBVyxLQUFLLGNBQVMsSUFBSSxjQUFTLElBQUksZ0JBQVcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFHLENBQzlGLElBQUksQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUNoQixRQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtBQUNiLFlBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2hDO0FBQ0QsV0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU07V0FDYixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFDWCxNQUFNO0FBQ1QsYUFBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSTtlQUFLLGlCQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFLO0FBQ3JFLGNBQUcsaUJBQUUsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQ3BDLG1CQUFPLElBQUksQ0FBQztXQUNiO0FBQ0QsaUJBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCLENBQUM7T0FBQSxDQUFDO09BQ0g7R0FBQSxDQUNILENBQUM7Q0FDSDs7QUFFRCxJQUFNLGdCQUFnQixHQUFHLCtCQUErQixDQUFDO0FBQ3pELElBQU0sMEJBQTBCLEdBQUcsNEJBQTRCLENBQUM7QUFDaEUsSUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQztBQUNoRCxJQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQzs7QUFFakMsSUFBSSx5QkFBeUIsR0FBRyxJQUFJLENBQUM7O0FBRXJDLFNBQVMsZ0NBQWdDLEdBQUc7QUFDMUMsTUFBRyx5QkFBeUIsS0FBSyxJQUFJLEVBQUU7QUFDckMsZ0JBQVksQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxZQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCw2QkFBeUIsR0FBRyxJQUFJLENBQUM7R0FDbEM7Q0FDRjs7QUFFRCxTQUFTLGNBQWMsQ0FBQyxNQUFNLEVBQUU7QUFDOUIsU0FBTztBQUNMLGdCQUFZLEVBQUUsSUFBSTtBQUNsQixXQUFPLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSTthQUFNO0FBQy9DLFlBQUksRUFBRSxJQUFJLENBQUMsS0FBSztBQUNoQixtQkFBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztPQUNuQztLQUFDLENBQUM7QUFDSCxTQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTTtHQUN2QyxDQUFDO0NBQ0g7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7QUFDakMsa0NBQWdDLEVBQUUsQ0FBQztBQUNuQyxNQUFHLENBQUMsS0FBSyxFQUFFO0FBQ1QsV0FBTyxtQkFBUSxPQUFPLENBQUM7QUFDckIsa0JBQVksRUFBRSxJQUFJO0FBQ2xCLGFBQU8sRUFBRSxFQUFFO0FBQ1gsV0FBSyxFQUFFLENBQUM7S0FDVCxDQUFDLENBQUM7R0FDSjtBQUNELFNBQU8sdUJBQVksVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFFBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQzthQUFNLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQUEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdHLFVBQU0sQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLFVBQUMsTUFBTSxFQUFLO0FBQy9DLGtCQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEIsYUFBTyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDeEMsQ0FBQztBQUNGLFFBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEQsUUFBTSxVQUFVLEdBQUc7QUFDakIsY0FBUSxFQUFFLDBCQUEwQjtBQUNwQyx3QkFBa0IsRUFBRSxnQkFBZ0I7S0FDckMsQ0FBQztBQUNGLFVBQU0sQ0FBQyxHQUFHLFFBQU0sZ0JBQWdCLEdBQUcsS0FBSyxTQUFJLGlCQUFFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBQyxLQUFLLEVBQUUsR0FBRzthQUFRLEdBQUcsU0FBSSxLQUFLO0tBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQUFBRSxDQUFDO0FBQzdHLFlBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLDZCQUF5QixHQUFHO0FBQzFCLGFBQU8sRUFBUCxPQUFPO0FBQ1AsWUFBTSxFQUFOLE1BQU07S0FDUCxDQUFDO0dBQ0gsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0NBQzlDOztBQUVELElBQU0saUJBQWlCLEdBQUcsdUJBQXVCLENBQUM7QUFDbEQsSUFBTSxVQUFVLEdBQUcsc0JBQXNCLENBQUM7O0FBRTFDLFNBQVMsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN6QixTQUFPLEtBQUssTUFBSSxVQUFVLEdBQUcsaUJBQWlCLEdBQUcsV0FBVyxDQUFHLENBQzVELElBQUksQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUNoQixRQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtBQUNiLFlBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2hDO0FBQ0QsV0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDdEIsQ0FBQyxDQUFDO0NBQ047O1FBRVEsTUFBTSxHQUFOLE1BQU07UUFBRSxrQkFBa0IsR0FBbEIsa0JBQWtCO1FBQUUsSUFBSSxHQUFKLElBQUkiLCJmaWxlIjoidXRpbHMvbnBtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgREVGQVVMVF9QQUdFX1NJWkUgPSAxMDA7XG5jb25zdCBBUlJBWV9QUk9QRVJUSUVTID0gWydrZXl3b3JkcycsICdkZXBlbmRlbmNpZXMnLCAnZGV2RGVwZW5kZW5jaWVzJ107XG5jb25zdCBTRUFSQ0hfVVJMID0gJy8vbnBtc2VhcmNoLmNvbS9xdWVyeSc7XG5jb25zdCBERUZBVUxUX0ZJRUxEUyA9IFtcbiAgJ25hbWUnLFxuICAndmVyc2lvbicsXG4gICdkZXNjcmlwdGlvbicsXG4gICdhdXRob3InLFxuICAnbWFpbnRhaW5lcnMnLFxuICAnaG9tZXBhZ2UnLFxuICAncmVwb3NpdG9yeScsXG4gICdyZWFkbWUnLFxuICAncmF0aW5nJyxcbiAgJ2NyZWF0ZWQnLFxuICAnbW9kaWZpZWQnLFxuICAnZGVwZW5kZW5jaWVzJyxcbiAgJ2RldkRlcGVuZGVuY2llcycsXG4gICdzY3JpcHRzJyxcbiAgJ2tleXdvcmRzJyxcblxuLy8gICBDdXJyZW50bHkgYnVnZ2VkXG4vLyAgJ3RpbWVzJyxcbl07XG5cbmZ1bmN0aW9uIHNlYXJjaChxdWVyeSwgZnJvbSA9IDAsIHNpemUgPSBERUZBVUxUX1BBR0VfU0laRSwgZmllbGRzID0gREVGQVVMVF9GSUVMRFMpIHtcbiAgcmV0dXJuIGZldGNoKGAke1NFQVJDSF9VUkx9P3E9bmFtZToke3F1ZXJ5fSZzaXplPSR7c2l6ZX0mZnJvbT0ke2Zyb219JmZpZWxkcz0ke2ZpZWxkcy5qb2luKCl9YClcbiAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIGlmKCFyZXN1bHQub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQucmVhc29uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qc29uKCk7XG4gIH0pLnRoZW4oKHJlc3VsdCkgPT5cbiAgICBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICByZXN1bHRzOiByZXN1bHQucmVzdWx0cy5tYXAoKGl0ZW0pID0+IF8ubWFwVmFsdWVzKGl0ZW0sIChwcm9wLCBrZXkpID0+IHtcbiAgICAgICAgaWYoXy5pbmNsdWRlcyhBUlJBWV9QUk9QRVJUSUVTLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3BbMF07XG4gICAgICB9KSksXG4gICAgfSlcbiAgKTtcbn1cblxuY29uc3QgQVVUT0NPTVBMRVRFX1VSTCA9ICcvL2FjLmNuc3RyYy5jb20vYXV0b2NvbXBsZXRlLyc7XG5jb25zdCBBVVRPQ09NUExFVEVfQ0FMTEJBQ0tfTkFNRSA9ICdzZWFyY2hBdXRvY29tcGxldGVDYWxsYmFjayc7XG5jb25zdCBBVVRPQ09NUExFVEVfS0VZID0gJ0NEMDZ6NGdWZXFTWFJpREwyWk5LJztcbmNvbnN0IEFVVE9DT01QTEVURV9USU1FT1VUID0gNTAwO1xuXG5sZXQgY3VycmVudEF1dG9jb21wbGV0ZVNlYXJjaCA9IG51bGw7XG5cbmZ1bmN0aW9uIGNhbmNlbEFuZENsZWFuQXV0b2NvbXBsZXRlU2VhcmNoKCkge1xuICBpZihjdXJyZW50QXV0b2NvbXBsZXRlU2VhcmNoICE9PSBudWxsKSB7XG4gICAgY2xlYXJUaW1lb3V0KGN1cnJlbnRBdXRvY29tcGxldGVTZWFyY2gudGltZW91dCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjdXJyZW50QXV0b2NvbXBsZXRlU2VhcmNoLnNjcmlwdCk7XG4gICAgY3VycmVudEF1dG9jb21wbGV0ZVNlYXJjaCA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVmb3JtYXRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiB7XG4gICAgYXV0b2NvbXBsZXRlOiB0cnVlLFxuICAgIHJlc3VsdHM6IHJlc3VsdC5zZWN0aW9ucy5wYWNrYWdlcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICBuYW1lOiBpdGVtLnZhbHVlLFxuICAgICAgZGVzY3JpcHRpb246IGl0ZW0uZGF0YS5kZXNjcmlwdGlvbixcbiAgICB9KSksXG4gICAgdG90YWw6IHJlc3VsdC5zZWN0aW9ucy5wYWNrYWdlcy5sZW5ndGgsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGF1dG9jb21wbGV0ZVNlYXJjaChxdWVyeSkge1xuICBjYW5jZWxBbmRDbGVhbkF1dG9jb21wbGV0ZVNlYXJjaCgpO1xuICBpZighcXVlcnkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIGF1dG9jb21wbGV0ZTogdHJ1ZSxcbiAgICAgIHJlc3VsdHM6IFtdLFxuICAgICAgdG90YWw6IDAsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdBdXRvY29tcGxldGUgc2VhcmNoIHRpbWVkIG91dCAhJykpLCBBVVRPQ09NUExFVEVfVElNRU9VVCk7XG4gICAgd2luZG93W0FVVE9DT01QTEVURV9DQUxMQkFDS19OQU1FXSA9IChyZXN1bHQpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHJldHVybiByZXNvbHZlKHJlZm9ybWF0UmVzdWx0KHJlc3VsdCkpO1xuICAgIH07XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU0NSSVBUJyk7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IHtcbiAgICAgIGNhbGxiYWNrOiBBVVRPQ09NUExFVEVfQ0FMTEJBQ0tfTkFNRSxcbiAgICAgICdhdXRvY29tcGxldGVfa2V5JzogQVVUT0NPTVBMRVRFX0tFWSxcbiAgICB9O1xuICAgIHNjcmlwdC5zcmMgPSBgJHtBVVRPQ09NUExFVEVfVVJMfSR7cXVlcnl9PyR7Xy5tYXAocGFyYW1ldGVycywgKHZhbHVlLCBrZXkpID0+IGAke2tleX09JHt2YWx1ZX1gKS5qb2luKCcmJyl9YDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgY3VycmVudEF1dG9jb21wbGV0ZVNlYXJjaCA9IHtcbiAgICAgIHRpbWVvdXQsXG4gICAgICBzY3JpcHQsXG4gICAgfTtcbiAgfSkuZmluYWxseShjYW5jZWxBbmRDbGVhbkF1dG9jb21wbGV0ZVNlYXJjaCk7XG59XG5cbmNvbnN0IE5QTV9SRUdJU1RFUllfVVJMID0gJy8vcmVnaXN0cnkubnBtanMub3JnLyc7XG5jb25zdCBDT1JTX1BST1hZID0gJy8vY29ycy5tYXhvZ2Rlbi5jb20vJztcblxuZnVuY3Rpb24gdmlldyhwYWNrYWdlTmFtZSkge1xuICByZXR1cm4gZmV0Y2goYCR7Q09SU19QUk9YWX0ke05QTV9SRUdJU1RFUllfVVJMfSR7cGFja2FnZU5hbWV9YClcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZighcmVzdWx0Lm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQucmVhc29uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQuanNvbigpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBzZWFyY2gsIGF1dG9jb21wbGV0ZVNlYXJjaCwgdmlldyB9O1xuIl19